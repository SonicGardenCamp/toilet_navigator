<%= render 'layouts/sidebar', toilet_places: @toilet_places%>
<div id='map'></div>

<style>
/* Google Mapを囲う要素 */
#map {
  position: relative;
  width: 100%;
  height: 0;
  padding-top: 50%; /* 比率を4:3に固定 */
}

/* Google Mapのiframe */
#map iframe {
  position: absolute;
  width: 100%;
  height: 100%;
}
</style>

<!-- app/views/some_view.html.erb -->
<script>
let map;
let markers = [];
function initMap() {
  const toiletPlaces = [
    // この部分はRailsからデータを取得
    <% @toilet_places.each do |toilet_place| %>
      {
        lat: <%= toilet_place.latitude %>,
        lng: <%= toilet_place.longitude %>
      },
    <% end %>
  ];
  map = new google.maps.Map(document.getElementById('map'), {
    center: { lat: toiletPlaces[0].lat, lng: toiletPlaces[0].lng },
    zoom: 12,
  });
  const image = "<%= asset_path('toilet.png') %>";
  toiletPlaces.forEach(place => {
    const marker = new google.maps.Marker({
      position: { lat: place.lat, lng: place.lng },
      map: map,
      icon: image,
    });
    markers.push(marker);
  });
  const directionsService = new google.maps.DirectionsService();
  const directionsRenderer = new google.maps.DirectionsRenderer();
  directionsRenderer.setMap(map);
  navigator.geolocation.getCurrentPosition(function(position) {
    const currentLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
    map.setCenter(currentLocation);
    const currentMarker = new google.maps.Marker({
      position: currentLocation,
      map: map,
    });
    markers.push(currentMarker);
    // 最短距離のtoilet_placeを見つける（簡単な例）
    let shortestDistance = Number.MAX_VALUE;
    let closestPlace = null;
    toiletPlaces.forEach(place => {
      const toiletLocation = new google.maps.LatLng(place.lat, place.lng);
      const distance = google.maps.geometry.spherical.computeDistanceBetween(currentLocation, toiletLocation);
      if (distance < shortestDistance) {
        shortestDistance = distance;
        closestPlace = place;
      }
    });
    // 最短距離のtoilet_placeまでのルートを取得
    const request = {
      origin: currentLocation,
      destination: new google.maps.LatLng(closestPlace.lat, closestPlace.lng),
      travelMode: 'WALKING',
    };
    directionsService.route(request, function(result, status) {
      if (status === 'OK') {
        directionsRenderer.setDirections(result);
      }
    });
  }, function(error) {
    console.log("Error occurred. Error code: " + error.code);
  });
}
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_MAP_API_KEY'] %>&callback=initMap" async defer></script>
